{"version":3,"sources":["services/triviaApi.js","actions/index.js","reducers/user.js","reducers/questions.js","reducers/score.js","reducers/index.js","store/index.js","services/triviaTokenApi.js","pages/Login.jsx","services/gravatarApi.js","components/Header.jsx","components/Buttons.jsx","components/Questions.jsx","pages/Game.jsx","pages/Configs.jsx","pages/Feedback.jsx","components/RenderRanking.jsx","pages/Ranking.jsx","serviceWorker.js","index.js","App.js","trivia.png"],"names":["fetchApi","a","async","token","JSON","parse","localStorage","getItem","fetch","request","json","response","results","questionsInfo","type","payload","scoreInfo","score","scoreNum","INITIAL_STATE","name","email","user","state","action","questions","isFetching","timer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","saveToken","setItem","stringify","fetchTokenApi","Login","handleChange","bind","handleClick","target","value","this","setState","props","userInfo","history","scoreActionInfo","push","player","assertions","gravatarEmail","ranking","className","src","triviaLogo","alt","data-testid","onChange","placeholder","length","onClick","disabled","to","Component","connect","dispatch","userInfoAction","gravatarImg","emailHash","md5","toString","Header","gravatarUserImg","Buttons","order","handleClickAnswer","click","questionResults","atualQuestion","handleNextBtn","scoreUpdate","style","correct_answer","incorrect_answers","map","question","index","key","visibility","React","Questions","shuffleButtons","setDifficulty","timeOut","setInterval","prevState","setTimerAction","clearInterval","questionDifficulty","dif","difficulty","randomButton","Math","floor","random","playerRanking","playerName","playerScore","playerPictureEmail","userRanking","picture","handleHanking","multiplication","playerStorage","category","setTimer","Game","questionInfo","Configs","Feedback","message","RenderRanking","playerRankings","sort","playerA","playerB","Ranking","Boolean","location","hostname","match","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"6gBAOeA,EAPE,8BAAAC,EAAAC,OAAA,uDACTC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAD/B,WAAAN,EAAA,MAEOO,MAAM,8CAAD,OAA+CL,KAF3D,cAETM,EAFS,kBAAAR,EAAA,MAGQQ,EAAQC,QAHhB,cAGTC,EAHS,yBAIRA,EAASC,SAJD,sCCeJC,EAAgB,SAACF,GAAD,MAAe,CAC1CG,KAb4B,iBAc5BC,QAAS,CACPJ,cAISK,EAAY,SAACC,GAAD,MAAY,CACnCH,KAlBwB,aAmBxBI,SAAUD,ICtBNE,EAAgB,CACpBC,KAAM,GACNC,MAAO,IAgBMC,MAbf,WAA8C,IAAhCC,EAA+B,uDAAvBJ,EAAeK,EAAQ,uCAC3C,OAAQA,EAAOV,MACf,IDPuB,YCQrB,OAAO,eACFS,EADL,CAEEH,KAAMI,EAAOT,QAAQO,KACrBD,MAAOG,EAAOT,QAAQM,QAE1B,QACE,OAAOE,ICdLJ,EAAgB,CACpBM,UAAW,GACXC,YAAY,GAsBCJ,MAnBf,WAA8C,IAAhCC,EAA+B,uDAAvBJ,EAAeK,EAAQ,uCAC3C,OAAQA,EAAOV,MACf,IFN4B,iBEO1B,OAAO,eACFS,EADL,GAEKC,EAAOT,QAFZ,CAGEW,YAAY,IAEhB,IFXuB,YEYrB,OAAO,eACFH,EADL,CAEEI,MAAOH,EAAOT,QAAQY,QAG1B,QACE,OAAOJ,ICpBLJ,EAAgB,CACpBF,MAAO,GAeMA,MAZf,WAA+C,IAAhCM,EAA+B,uDAAvBJ,EAAeK,EAAQ,uCAC5C,OAAQA,EAAOV,MACf,IHHwB,aGItB,OAAO,eACFS,EADL,CAEEN,MAAOO,EAAON,WAElB,QACE,OAAOK,ICHIK,EANKC,0BAAgB,CAClCP,OACAG,YACAR,UCHIa,EAAQC,sBACZH,EACAI,8BACEC,0BAAgBC,OAIhBC,OAAOC,UACTD,OAAOL,MAAQA,GAGFA,Q,4ECdTO,EAAY,SAAOlC,GAAP,SAAAF,EAAAC,OAAA,yEAAiBI,aAAagC,QAAQ,QAASlC,KAAKmC,UAAUpC,KAA9D,sCAQHqC,EANO,4BAAAvC,EAAAC,OAAA,kEAAAD,EAAA,MACEO,MALN,sDAII,cACdC,EADc,kBAAAR,EAAA,MAEGQ,EAAQC,QAFX,OAEdC,EAFc,OAGpB0B,EAAU1B,EAASR,OAHC,sCCKhBsC,G,mBACJ,aAAe,IAAD,8BACZ,+CACKlB,MAAQ,CACXH,KAAM,GACNC,MAAO,IAET,EAAKqB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAPP,E,6EAU6B,IAAD,IAA3BE,OAAUC,EAAiB,EAAjBA,MAAO1B,EAAU,EAAVA,KAC9B2B,KAAKC,SAAL,eACG5B,EAAO0B,M,qIAKcC,KAAKxB,MAArBH,E,EAAAA,KAAMC,E,EAAAA,M,EACiC0B,KAAKE,MAA5CC,E,EAAAA,SAAUC,E,EAAAA,QAASC,E,EAAAA,gB,mBACrBZ,K,iCACAU,EAAS9B,EAAMC,I,iCACf8B,EAAQE,KAAK,U,OACbC,EAAS,CACbA,OAAQ,CACNlC,OACAmC,WAAY,EACZtC,MAAO,EACPuC,cAAenC,IAGboC,EAAU,CACdA,QAAS,IAGXnD,aAAaiB,MAAQnB,KAAKmC,UAAUe,GAG/BhD,aAAaC,QAAQ,aACxBD,aAAamD,QAAUrD,KAAKmC,UAAUkB,IAIxCL,EAAgB,G,iFAIhB,IADO,EAEiBL,KAAKxB,MAArBH,EAFD,EAECA,KAAMC,EAFP,EAEOA,MACd,OACE,6BACE,0BAAMqC,UAAU,cACd,yBAAKC,IAAMC,IAAaC,IAAI,qBAAqBH,UAAU,gBAC3D,2BACEA,UAAU,cACV5C,KAAK,OACLgD,cAAY,oBACZC,SAAWhB,KAAKL,aAChBtB,KAAK,OACL4C,YAAY,SAEd,2BACEN,UAAU,cACV5C,KAAK,QACLgD,cAAY,uBACZC,SAAWhB,KAAKL,aAChBtB,KAAK,QACL4C,YAAY,WAEd,4BACElD,KAAK,SACL4C,UAAYtC,EAAK6C,QAxBH,GAyBT5C,EAAM4C,QAzBG,EAyBuB,iBAAmB,YACxDC,QAAUnB,KAAKH,YACfkB,cAAY,WACZK,SAAW/C,EAAK6C,QA5BF,GA4B6B5C,EAAM4C,QA5BnC,GAsBhB,SAUA,kBAAC,IAAD,CAAMG,GAAG,aACP,4BACEV,UAAU,qBACVI,cAAY,eACZhD,KAAK,UAHP,8B,GAhFQuD,cA4GLC,cAAQ,MANI,SAACC,GAAD,MAAe,CACxCrB,SAAU,SAAC9B,EAAMC,GAAP,OACRkD,EP1GoB,SAACjD,EAAMD,GAAP,MAAkB,CACxCP,KANuB,YAOvBC,QAAS,CACPO,OACAD,UOsGSmD,CAAepD,EAAMC,KAChC+B,gBAAiB,SAAClC,GAAD,OAAcqD,EAASvD,EAAUE,QAGrCoD,CAAkC7B,G,kBC9GlCgC,EALK,SAACpD,GACnB,IAAMqD,EAAYC,IAAItD,GAAOuD,WAC7B,MAAM,mCAAN,OAA0CF,ICEtCG,E,iLACM,IAAD,EACwB9B,KAAKE,MAA5B7B,EADD,EACCA,KAAMH,EADP,EACOA,MAAOI,EADd,EACcA,MACfyD,EAAkBL,EAAYpD,GACpC,OACE,yBAAKqC,UAAU,UACb,yBAAKA,UAAU,qBAAqBC,IAAMC,IAAaC,IAAI,uBAC3D,0BAAMH,UAAU,UAAhB,UAEE,0BAAMI,cAAY,gBACf7C,IAGL,yBAAKyC,UAAU,YACb,6BACE,yBACEC,IAAMmB,EACNjB,IAAI,OACJC,cAAY,yBACZJ,UAAU,qBAGd,yBAAKA,UAAU,eAAf,WAEE,0BAAMI,cAAY,qBAAqBJ,UAAU,eAC7CtC,U,GAzBKiD,aA8CNC,eANS,SAAC/C,GAAD,MAAY,CAClCH,KAAMG,EAAMD,KAAKF,KACjBC,MAAOE,EAAMD,KAAKD,MAClBJ,MAAOM,EAAMN,MAAMA,SAGmB,KAAzBqD,CAA+BO,G,SCU/BE,G,wLA1DH,IAAD,EAEiEhC,KAAKE,MADrE+B,EADD,EACCA,MAAOrD,EADR,EACQA,MAAOsD,EADf,EACeA,kBACpBC,EAFK,EAELA,MAAOC,EAFF,EAEEA,gBAAiBC,EAFnB,EAEmBA,cAAeC,EAFlC,EAEkCA,cAAeC,EAFjD,EAEiDA,YACxD,OACE,6BACE,6BAAS5B,UAAU,mBACjB,4BACE5C,KAAK,SACLgD,cAAY,iBACZyB,MAAQ,CAAEP,SACVtB,UAAuB,IAAV/B,GAAeuD,EAAS,cAAgB,aACrDhB,QAAUoB,EACVnB,SAAqB,IAAVxC,GAAeuD,GAEzBC,EAAgBxE,SAASyE,GAAeI,gBAGzCL,EACGxE,SAASyE,GAAeK,kBAAkBC,KAAI,SAACC,EAAUC,GAAX,OAC7C,4BACEC,IAAMD,EACN9E,KAAK,SACLyE,MAAQ,CAAEP,MAAOY,GACjB9B,cAAA,uBAA8B8B,GAC9BlC,UAAuB,IAAV/B,GAAeuD,EAAS,cAAgB,aACrDhB,QAAUe,EACVd,SAAqB,IAAVxC,GAAeuD,GAEzBS,OAKX,4BACE7E,KAAK,SACLoD,QAAUmB,EACVvB,cAAY,WACZJ,UAAU,eACV6B,MAAQ,CAAEO,WAAYZ,GAAmB,IAAVvD,EAAc,UAAY,WAL3D,iB,GAlCcoE,IAAM1B,YCKtB2B,E,YACJ,aAAe,IAAD,8BACZ,+CAEKzE,MAAQ,CACXyD,MAAO,EACPI,cAAe,EACfF,OAAO,EACPvD,MAAO,GACPV,MAAO,GAET,EAAKoE,cAAgB,EAAKA,cAAc1C,KAAnB,gBACrB,EAAKsD,eAAiB,EAAKA,eAAetD,KAApB,gBACtB,EAAKsC,kBAAoB,EAAKA,kBAAkBtC,KAAvB,gBACzB,EAAK2C,YAAc,EAAKA,YAAY3C,KAAjB,gBACnB,EAAKuD,cAAgB,EAAKA,cAAcvD,KAAnB,gBAdT,E,iFAiBO,IAAD,OAElBI,KAAKkD,iBACLlD,KAAKoD,QAAUC,aAAY,WACzB,EAAKpD,UAAS,SAACqD,GAAD,MAAgB,CAAE1E,MAAO0E,EAAU1E,MAAQ,QAHxC,O,2CAOC,IACZA,EAAUoB,KAAKxB,MAAfI,MACA2E,EAAmBvD,KAAKE,MAAxBqD,eACM,IAAV3E,IACF4E,cAAcxD,KAAKoD,SACnBG,EAAe3E,M,sCAMjB,IAAI6E,EAAqB,EAEjBrB,EAAoBpC,KAAKE,MAAzBkC,gBACAC,EAAkBrC,KAAKxB,MAAvB6D,cACFqB,EAAMtB,EAAgBxE,SAASyE,GAAesB,WAQpD,MAPY,SAARD,EACFD,EAAqB,EACJ,WAARC,EACTD,EAAqB,EACJ,SAARC,IACTD,EATiB,GAWZA,I,uCAIP,IACMG,EAAeC,KAAKC,MADH,EACSD,KAAKE,UACrC/D,KAAKC,SAAS,CACZgC,MAAO2B,M,sCAKT,IAAMI,EAAgB3G,KAAKC,MAAMC,aAAaC,QAAQ,YAChDyG,EAAa5G,KAAKC,MAAMC,aAAaC,QAAQ,UAAU+C,OAAOlC,KAC9D6F,EAAc7G,KAAKC,MAAMC,aAAaC,QAAQ,UAAU+C,OAAOrC,MAC/DiG,EAAqB9G,KACxBC,MAAMC,aAAaC,QAAQ,UAAU+C,OAAOE,cAEzC2D,EAAc,CAClB/F,KAAM4F,EACN/F,MAAOgG,EACPG,QAJoB3C,EAAYyC,IAMlCH,EAActD,QAAd,sBAA4BsD,EAActD,SAA1C,CAAmD0D,IACnD7G,aAAamD,QAAUrD,KAAKmC,UAAUwE,K,iFAOvB,IAAD,OACN3B,EAAkBrC,KAAKxB,MAAvB6D,cAGAjC,EAAYJ,KAAKE,MAAjBE,QADW,IAEfiC,IACFrC,KAAKsE,gBACLlE,EAAQE,KAAK,cAEfN,KAAKkD,iBAELlD,KAAKC,SAAS,CACZoC,cAAeA,EAAgB,EAC/BF,OAAO,EACPvD,MAAO,KAOToB,KAAKoD,QAAUC,aAAY,WACzB,EAAKpD,UAAS,SAACqD,GAAD,MAAgB,CAAE1E,MAAO0E,EAAU1E,MAAQ,QAFxC,O,0HAOMoB,KAAKxB,MAAtBN,E,EAAAA,MAAOU,E,EAAAA,MACU,GACjByB,EAAoBL,KAAKE,MAAzBG,gBAERL,KAAKkC,oBACCyB,EAAa3D,KAAKmD,gBAExB9C,EAAgBnC,EANS,IAKnBqG,EAAiBZ,EAAa/E,IAEpCoB,KAAKC,SAAS,CAAE/B,MAAOA,EAPE,GAOyBqG,KAC5CC,EAAgBnH,KAAKC,MAAMC,aAAaC,QAAQ,WAGxC+C,OAAOrC,MAAQA,EAXJ,GAW+BqG,EACxDC,EAAcjE,OAAOC,YAAc,EACnCjD,aAAaiB,MAAQnB,KAAKmC,UAAUgF,G,4FAGjB,IACXjB,EAAmBvD,KAAKE,MAAxBqD,eACA3E,EAAUoB,KAAKxB,MAAfI,MACRoB,KAAKC,SAAS,CAAEkC,OAAO,IACvBqB,cAAcxD,KAAKoD,SACnBG,EAAe3E,K,+BAGP,IAAD,EACiCoB,KAAKE,MAArCkC,EADD,EACCA,gBAAiBzD,EADlB,EACkBA,WADlB,EAEwCqB,KAAKxB,MAA5C6D,EAFD,EAECA,cAAeJ,EAFhB,EAEgBA,MAAOE,EAFvB,EAEuBA,MAAOvD,EAF9B,EAE8BA,MACrC,OAAID,EAAmB,sCAErB,6BACE,6BAASgC,UAAU,oBACjB,6BAASA,UAAU,aACjB,wBAAII,cAAY,qBAEZqB,EAAgBxE,SAASyE,GAAeoC,UAG5C,2BAAK7F,GACL,uBAAGmC,cAAY,iBAEXqB,EAAgBxE,SAASyE,GAAeO,WAI9C,6BAASjC,UAAU,aACjB,kBAAC,EAAD,CACEsB,MAAQA,EACRC,kBAAoBlC,KAAKkC,kBACzBK,YAAcvC,KAAKuC,YACnBJ,MAAQA,EACRE,cAAgBA,EAChBD,gBAAkBA,EAClBE,cAAgBtC,KAAKsC,cACrB1D,MAAQA,W,GAjKE0C,aA+LTC,eALS,SAAC/C,GAAD,MAAY,CAClC4D,gBAAiB5D,EAAME,UAAUd,SACjCe,WAAYH,EAAME,UAAUC,eAPH,SAAC6C,GAAD,MAAe,CACxC+B,eAAgB,SAAC3E,GAAD,OAAY4C,EX7JN,SAAC5C,GAAD,MAAY,CAClCb,KA9BuB,YA+BvBC,QAAS,CACPY,UW0JmC8F,CAAS9F,KAC9CyB,gBAAiB,SAAClC,GAAD,OAAcqD,EAASvD,EAAUE,QAQrCoD,CAA6C0B,GC/LtD0B,G,oMAGFC,EADyB5E,KAAKE,MAAtB0E,kB,+BAIA,IACAxE,EAAYJ,KAAKE,MAAjBE,QACR,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWA,QAAUA,S,GAXVkB,cA4BJC,cAAQ,MAJI,SAACC,GAAD,MAAe,CACxCoD,aAAc,kBAAMpD,GZNkB,SAAOA,GAAP,eAAAtE,EAAAC,OAAA,kEAAAD,EAAA,MACfD,KADe,OAChCW,EADgC,OAGtC4D,EAAS1D,EADI,CAAEF,cAFuB,4CYSzB2D,CAAkCoD,GCxBlCE,E,iLARX,OACE,6BACE,wBAAI9D,cAAY,kBAAhB,oC,GAJcO,aCGDwD,G,wLAEjB,IADO,EACezH,KAAKC,MAAMC,aAAaC,QAAQ,UACV+C,OAApCC,EAFD,EAECA,WAAYtC,EAFb,EAEaA,MAEd6G,EAAUvE,GADU,EACwB,cAC9C,sBACJ,OACE,iCACE,kBAAC,EAAD,MACA,yBAAKG,UAAU,YACb,wBAAII,cAAY,iBAAkBgE,GAClC,0BAAMpE,UAAU,SAAhB,uBAEG,IACD,0BAAMI,cAAY,uBAAuBJ,UAAU,SAAUzC,IAE/D,0BAAMyC,UAAU,cAAhB,wBAEG,IACD,0BACEI,cAAY,0BACZJ,UAAU,cAERH,IAGN,yBAAKG,UAAU,oBACb,kBAAC,IAAD,CAAMU,GAAG,KACP,4BACEV,UAAU,eACV5C,KAAK,SACLgD,cAAY,kBAHd,oBAQF,kBAAC,IAAD,CAAMM,GAAG,YACP,4BACEtD,KAAK,SACL4C,UAAU,eACVI,cAAY,eAHd,uB,GAtCwBO,cCHjB0D,G,iLAEjB,IAAMC,EAAiB5H,KAAKC,MAAMC,aAAaC,QAAQ,YAAYkD,QACnE,OACE,4BACIuE,EACCC,MAAK,SAACC,EAASC,GAAV,OAAsBA,EAAQlH,MAAQiH,EAAQjH,SACnDyE,KAAI,SAACpC,EAAQsC,GAAT,OACH,wBAAIC,IAAMD,EAAQlC,UAAU,gBAC1B,0BACEI,cAAA,sBAA6B8B,GAC7BlC,UAAU,aAERJ,EAAOlC,MAEX,0BAAMsC,UAAU,eAAhB,YAEG,IACD,0BAAMI,cAAA,uBAA8B8B,IAChCtC,EAAOrC,iB,GAnBgBoD,aCGtB+D,I,wLAEjB,OACE,6BAAS1E,UAAU,WACjB,wBAAII,cAAY,iBAAhB,WAGA,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAMM,GAAG,KACP,4BACEtD,KAAK,SACLgD,cAAY,cACZJ,UAAU,eAHZ,6B,GAT2BW,c,OCOjBgE,QACW,cAA7BlG,OAAOmG,SAASC,UAEe,UAA7BpG,OAAOmG,SAASC,UAEhBpG,OAAOmG,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAS,uBACtB,kBAAC,IAAD,CAAU7G,MAAQA,GAChB,mBCHS,WACb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8G,OAAK,EAACC,KAAK,IAAIC,UAAYrG,IAClC,kBAAC,IAAD,CAAOoG,KAAK,YAAYC,UAAYlB,IACpC,kBAAC,IAAD,CAAOiB,KAAK,QAAQH,OAAS,SAACzF,GAAD,OAAW,kBAAC,EAAUA,MACnD,kBAAC,IAAD,CAAO4F,KAAK,YAAYH,OAAS,SAACzF,GAAD,OAAW,kBAAC,EAAcA,MAC3D,kBAAC,IAAD,CAAO4F,KAAK,WAAWC,UAAYV,QDJnC,QAGJW,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBGrInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.7a44ab62.chunk.js","sourcesContent":["const fetchApi = async () => {\n  const token = JSON.parse(localStorage.getItem('token'));\n  const request = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const response = await request.json();\n  return response.results;\n};\n\nexport default fetchApi;\n","import fetchApi from '../services/triviaApi';\n\nexport const USER_INFO = 'USER_INFO';\nexport const QUESTIONS_INFO = 'QUESTIONS_INFO';\nexport const SET_TIMER = 'SET_TIMER';\nexport const SCORE_INFO = 'SCORE_INFO';\n\nexport const userInfo = (user, email) => ({\n  type: USER_INFO,\n  payload: {\n    user,\n    email,\n  },\n});\n\nexport const questionsInfo = (response) => ({\n  type: QUESTIONS_INFO,\n  payload: {\n    response,\n  },\n});\n\nexport const scoreInfo = (score) => ({\n  type: SCORE_INFO,\n  scoreNum: score,\n});\n\nexport const questionsInfoThunk = () => async (dispatch) => {\n  const response = await fetchApi();\n  const data = { response };\n  dispatch(questionsInfo(data));\n};\n\nexport const setTimer = (timer) => ({\n  type: SET_TIMER,\n  payload: {\n    timer,\n  },\n});\n","import { USER_INFO } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_INFO:\n    return {\n      ...state,\n      name: action.payload.user,\n      email: action.payload.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import { QUESTIONS_INFO, SET_TIMER } from '../actions';\n\nconst INITIAL_STATE = {\n  questions: [],\n  isFetching: true,\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case QUESTIONS_INFO:\n    return {\n      ...state,\n      ...action.payload,\n      isFetching: false,\n    };\n  case SET_TIMER: {\n    return {\n      ...state,\n      timer: action.payload.timer,\n    };\n  }\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import { SCORE_INFO } from '../actions';\n\nconst INITIAL_STATE = {\n  score: 0,\n};\n\nfunction score(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SCORE_INFO:\n    return {\n      ...state,\n      score: action.scoreNum,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default score;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport questions from './questions';\nimport score from './score';\n\nconst rootReducer = combineReducers({\n  user,\n  questions,\n  score,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","const END_POINT = 'https://opentdb.com/api_token.php?command=request';\n\nconst saveToken = async (token) => localStorage.setItem('token', JSON.stringify(token));\n\nconst fetchTokenApi = async () => {\n  const request = await fetch(END_POINT);\n  const response = await request.json();\n  saveToken(response.token);\n};\n\nexport default fetchTokenApi;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport triviaLogo from '../trivia.png';\nimport fetchTokenApi from '../services/triviaTokenApi';\nimport { userInfo as userInfoAction, scoreInfo } from '../actions';\nimport './login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target: { value, name } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleClick() {\n    const { name, email } = this.state;\n    const { userInfo, history, scoreActionInfo } = this.props;\n    await fetchTokenApi();\n    await userInfo(name, email);\n    await history.push('/game');\n    const player = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: email,\n      },\n    };\n    const ranking = {\n      ranking: [],\n    };\n\n    localStorage.state = JSON.stringify(player);\n\n    // se não existir o ranking no localstorage, este é criado\n    if (!localStorage.getItem('ranking')) {\n      localStorage.ranking = JSON.stringify(ranking);\n    }\n\n    // zera a pontuação do usuário\n    scoreActionInfo(0);\n  }\n\n  render() {\n    const MIN_CHARACTER = 0;\n    const { name, email } = this.state;\n    return (\n      <div>\n        <form className=\"form-login\">\n          <img src={ triviaLogo } alt=\"Logo do App Trivia\" className=\"trivia-logo\" />\n          <input\n            className=\"input-login\"\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            onChange={ this.handleChange }\n            name=\"name\"\n            placeholder=\"Nome\"\n          />\n          <input\n            className=\"input-login\"\n            type=\"email\"\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.handleChange }\n            name=\"email\"\n            placeholder=\"E-mail\"\n          />\n          <button\n            type=\"button\"\n            className={ name.length <= MIN_CHARACTER\n              || email.length <= MIN_CHARACTER ? 'btn-login-game' : 'btn-login' }\n            onClick={ this.handleClick }\n            data-testid=\"btn-play\"\n            disabled={ name.length <= MIN_CHARACTER || email.length <= MIN_CHARACTER }\n          >\n            Jogar\n          </button>\n          <Link to=\"/settings\">\n            <button\n              className=\"btn-login settings\"\n              data-testid=\"btn-settings\"\n              type=\"button\"\n            >\n              Configurações\n            </button>\n          </Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  scoreActionInfo: PropTypes.func.isRequired,\n  userInfo: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userInfo: (name, email) => (\n    dispatch(userInfoAction(name, email))),\n  scoreActionInfo: (scoreNum) => dispatch(scoreInfo(scoreNum)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import md5 from 'crypto-js/md5';\n\nconst gravatarImg = (email) => {\n  const emailHash = md5(email).toString();\n  return `https://www.gravatar.com/avatar/${emailHash}`;\n};\n\nexport default gravatarImg;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport triviaLogo from '../trivia.png';\nimport gravatarImg from '../services/gravatarApi';\n\nclass Header extends Component {\n  render() {\n    const { name, score, email } = this.props;\n    const gravatarUserImg = gravatarImg(email);\n    return (\n      <div className=\"header\">\n        <img className=\"trivia-logo-header\" src={ triviaLogo } alt=\"Logo do App Trivia\" />\n        <span className=\"points\">\n          Pontos:\n          <span data-testid=\"header-score\">\n            {score}\n          </span>\n        </span>\n        <div className=\"userInfo\">\n          <div>\n            <img\n              src={ gravatarUserImg }\n              alt=\"user\"\n              data-testid=\"header-profile-picture\"\n              className=\"profile-picture\"\n            />\n          </div>\n          <div className=\"name-player\">\n            Jogador:\n            <span data-testid=\"header-player-name\" className=\"name-player\">\n              { name }\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  email: state.user.email,\n  score: state.score.score,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Buttons extends React.Component {\n  render() {\n    const { order, timer, handleClickAnswer,\n      click, questionResults, atualQuestion, handleNextBtn, scoreUpdate } = this.props;\n    return (\n      <div>\n        <section className=\"section-answers\">\n          <button\n            type=\"button\"\n            data-testid=\"correct-answer\"\n            style={ { order } }\n            className={ (timer === 0 || click) ? 'rightanswer' : 'answer-btn' }\n            onClick={ scoreUpdate }\n            disabled={ timer === 0 || click }\n          >\n            {questionResults.response[atualQuestion].correct_answer}\n          </button>\n          {\n            questionResults\n              .response[atualQuestion].incorrect_answers.map((question, index) => (\n                <button\n                  key={ index }\n                  type=\"button\"\n                  style={ { order: index } }\n                  data-testid={ `wrong-answer-${index}` }\n                  className={ (timer === 0 || click) ? 'wronganswer' : 'answer-btn' }\n                  onClick={ handleClickAnswer }\n                  disabled={ timer === 0 || click }\n                >\n                  {question}\n                </button>\n              ))\n          }\n        </section>\n        <button\n          type=\"button\"\n          onClick={ handleNextBtn }\n          data-testid=\"btn-next\"\n          className=\"continue-btn\"\n          style={ { visibility: click || timer === 0 ? 'visible' : 'hidden' } }\n        >\n          Continue\n        </button>\n      </div>\n    );\n  }\n}\n\nButtons.propTypes = {\n  order: PropTypes.number.isRequired,\n  handleClickAnswer: PropTypes.func.isRequired,\n  click: PropTypes.bool.isRequired,\n  timer: PropTypes.number.isRequired,\n  questionResults: PropTypes.arrayOf(PropTypes.any).isRequired,\n  atualQuestion: PropTypes.number.isRequired,\n  handleNextBtn: PropTypes.func.isRequired,\n  scoreUpdate: PropTypes.func.isRequired,\n};\n\nexport default Buttons;\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport './questions.css';\nimport Buttons from './Buttons';\nimport { scoreInfo, setTimer } from '../actions';\nimport gravatarImg from '../services/gravatarApi';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      order: 0,\n      atualQuestion: 0,\n      click: false,\n      timer: 30,\n      score: 0,\n    };\n    this.handleNextBtn = this.handleNextBtn.bind(this);\n    this.shuffleButtons = this.shuffleButtons.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.scoreUpdate = this.scoreUpdate.bind(this);\n    this.setDifficulty = this.setDifficulty.bind(this);\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    this.shuffleButtons();\n    this.timeOut = setInterval(() => {\n      this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n    }, ONE_SECOND);\n  }\n\n  componentDidUpdate() {\n    const { timer } = this.state;\n    const { setTimerAction } = this.props;\n    if (timer === 0) {\n      clearInterval(this.timeOut);\n      setTimerAction(timer);\n    }\n  }\n\n  setDifficulty() {\n    // Verifica dificuldade\n    let questionDifficulty = 0;\n    const THREE_DIFF = 3;\n    const { questionResults } = this.props;\n    const { atualQuestion } = this.state;\n    const dif = questionResults.response[atualQuestion].difficulty;\n    if (dif === 'easy') {\n      questionDifficulty = 1;\n    } else if (dif === 'medium') {\n      questionDifficulty = 2;\n    } else if (dif === 'hard') {\n      questionDifficulty = THREE_DIFF;\n    }\n    return questionDifficulty;\n  }\n\n  shuffleButtons() {\n    const ANSWERS_NUMBER = 4;\n    const randomButton = Math.floor(Math.random() * ANSWERS_NUMBER);\n    this.setState({\n      order: randomButton,\n    });\n  }\n\n  handleHanking() {\n    const playerRanking = JSON.parse(localStorage.getItem('ranking'));\n    const playerName = JSON.parse(localStorage.getItem('state')).player.name;\n    const playerScore = JSON.parse(localStorage.getItem('state')).player.score;\n    const playerPictureEmail = JSON\n      .parse(localStorage.getItem('state')).player.gravatarEmail;\n    const playerPicture = gravatarImg(playerPictureEmail);\n    const userRanking = {\n      name: playerName,\n      score: playerScore,\n      picture: playerPicture,\n    };\n    playerRanking.ranking = [...playerRanking.ranking, userRanking];\n    localStorage.ranking = JSON.stringify(playerRanking);\n  }\n\n  historyFeedback() {\n\n  }\n\n  handleNextBtn() {\n    const { atualQuestion } = this.state;\n\n    const NUMBER_MAX = 4;\n    const { history } = this.props;\n    if (atualQuestion === NUMBER_MAX) {\n      this.handleHanking();\n      history.push('/feedback');\n    }\n    this.shuffleButtons();\n\n    this.setState({\n      atualQuestion: atualQuestion + 1,\n      click: false,\n      timer: 30,\n    });\n\n    // History.push para Feedback\n\n    // Ativa o timer nas outras perguntas\n    const ONE_SECOND = 1000;\n    this.timeOut = setInterval(() => {\n      this.setState((prevState) => ({ timer: prevState.timer - 1 }));\n    }, ONE_SECOND);\n  }\n\n  async scoreUpdate() {\n    const { score, timer } = this.state;\n    const rightAnswerScore = 10;\n    const { scoreActionInfo } = this.props;\n\n    this.handleClickAnswer();\n    const difficulty = this.setDifficulty();\n    const multiplication = difficulty * timer;\n    scoreActionInfo(score + rightAnswerScore + multiplication);\n    this.setState({ score: score + rightAnswerScore + multiplication });\n    const playerStorage = JSON.parse(localStorage.getItem('state'));\n    // Referência ao código do grupo 26 - espalhar valores na localStorage\n    // https://github.com/tryber/sd-014-a-project-trivia-react-redux/blob/group-26-requisito-11/src/pages/Trivia.jsx\n    playerStorage.player.score = score + rightAnswerScore + multiplication;\n    playerStorage.player.assertions += 1;\n    localStorage.state = JSON.stringify(playerStorage);\n  }\n\n  handleClickAnswer() {\n    const { setTimerAction } = this.props;\n    const { timer } = this.state;\n    this.setState({ click: true });\n    clearInterval(this.timeOut);\n    setTimerAction(timer);\n  }\n\n  render() {\n    const { questionResults, isFetching } = this.props;\n    const { atualQuestion, order, click, timer } = this.state;\n    if (isFetching) return <p>Loading</p>;\n    return (\n      <div>\n        <section className=\"question-wrapper\">\n          <section className=\"questions\">\n            <h3 data-testid=\"question-category\">\n              {\n                questionResults.response[atualQuestion].category\n              }\n            </h3>\n            <p>{ timer }</p>\n            <p data-testid=\"question-text\">\n              {\n                questionResults.response[atualQuestion].question\n              }\n            </p>\n          </section>\n          <section className=\"questions\">\n            <Buttons\n              order={ order }\n              handleClickAnswer={ this.handleClickAnswer }\n              scoreUpdate={ this.scoreUpdate }\n              click={ click }\n              atualQuestion={ atualQuestion }\n              questionResults={ questionResults }\n              handleNextBtn={ this.handleNextBtn }\n              timer={ timer }\n            />\n          </section>\n        </section>\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  isFetching: PropTypes.bool.isRequired,\n  scoreActionInfo: PropTypes.func.isRequired,\n  questionResults: PropTypes.shape({\n    response: PropTypes.arrayOf().isRequired }).isRequired,\n  setTimerAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  setTimerAction: (timer) => (dispatch(setTimer(timer))),\n  scoreActionInfo: (scoreNum) => dispatch(scoreInfo(scoreNum)),\n});\n\nconst mapStateToProps = (state) => ({\n  questionResults: state.questions.response,\n  isFetching: state.questions.isFetching,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Questions from '../components/Questions';\nimport { questionsInfoThunk } from '../actions';\nimport './game.css';\n\nclass Game extends Component {\n  componentDidMount() {\n    const { questionInfo } = this.props;\n    questionInfo();\n  }\n\n  render() {\n    const { history } = this.props;\n    return (\n      <div>\n        <Header />\n        <Questions history={ history } />\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  questionInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  questionInfo: () => dispatch(questionsInfoThunk()),\n});\n\nexport default connect(null, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\n\nclass Configs extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Tela de Configurações</h1>\n      </div>\n    );\n  }\n}\n\nexport default Configs;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport './feedback.css';\n\nexport default class Feedback extends Component {\n  render() {\n    const playerStorage = JSON.parse(localStorage.getItem('state'));\n    const { assertions, score } = playerStorage.player;\n    const ASSERTIONS_NUMBER = 3;\n    const message = assertions >= ASSERTIONS_NUMBER ? 'Mandou bem!'\n      : 'Podia ser melhor...';\n    return (\n      <section>\n        <Header />\n        <div className=\"feedback\">\n          <h2 data-testid=\"feedback-text\">{ message }</h2>\n          <span className=\"score\">\n            Sua pontuação:\n            {' '}\n            <span data-testid=\"feedback-total-score\" className=\"score\">{ score }</span>\n          </span>\n          <span className=\"assertions\">\n            Número de acertos:\n            {' '}\n            <span\n              data-testid=\"feedback-total-question\"\n              className=\"assertions\"\n            >\n              { assertions }\n            </span>\n          </span>\n          <div className=\"buttons-feedback\">\n            <Link to=\"/\">\n              <button\n                className=\"btn-feedback\"\n                type=\"button\"\n                data-testid=\"btn-play-again\"\n              >\n                Jogar novamente\n              </button>\n            </Link>\n            <Link to=\"/ranking\">\n              <button\n                type=\"button\"\n                className=\"btn-feedback\"\n                data-testid=\"btn-ranking\"\n              >\n                Ver Ranking\n              </button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class RenderRanking extends Component {\n  render() {\n    const playerRankings = JSON.parse(localStorage.getItem('ranking')).ranking;\n    return (\n      <ol>\n        { playerRankings\n          .sort((playerA, playerB) => playerB.score - playerA.score)\n          .map((player, index) => (\n            <li key={ index } className=\"user-ranking\">\n              <span\n                data-testid={ `player-name-${index}` }\n                className=\"user-name\"\n              >\n                { player.name }\n              </span>\n              <span className=\"user-points\">\n                - Pontos:\n                {' '}\n                <span data-testid={ `player-score-${index}` }>\n                  { player.score }\n                </span>\n              </span>\n            </li>\n          )) }\n      </ol>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport RenderRanking from '../components/RenderRanking';\nimport './ranking.css';\n\nexport default class Ranking extends Component {\n  render() {\n    return (\n      <section className=\"ranking\">\n        <h2 data-testid=\"ranking-title\">\n          Ranking\n        </h2>\n        <RenderRanking />\n        <Link to=\"/\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            className=\"initial-btn\"\n          >\n            Voltar ao início\n          </button>\n        </Link>\n      </section>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/Trivia-React-Redux\">\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Configs from './pages/Configs';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/settings\" component={ Configs } />\n      <Route path=\"/game\" render={ (props) => <Game { ...props } /> } />\n      <Route path=\"/feedback\" render={ (props) => <Feedback { ...props } /> } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}